// <auto-generated />
using System;
using Medicoweb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Medicoweb.Data.Migrations
{
    [DbContext(typeof(MedicowebDbContext))]
    [Migration("20190122210801_22.01")]
    partial class _2201
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Medicoweb.Data.Models.Account.MedicowebRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = new Guid("3ca04c41-6ba2-41b4-8549-98e09c83777f"), ConcurrencyStamp = "3ca04c41-6ba2-41b4-8549-98e09c83777f", Name = "Doctor", NormalizedName = "DOCTOR" },
                        new { Id = new Guid("7fd7bc3a-00b6-47d4-a18b-e3c419bbb071"), ConcurrencyStamp = "7fd7bc3a-00b6-47d4-a18b-e3c419bbb071", Name = "Patient", NormalizedName = "PATIENT" },
                        new { Id = new Guid("4d6100b7-05cb-45da-a6f3-cce42c4f9930"), ConcurrencyStamp = "4d6100b7-05cb-45da-a6f3-cce42c4f9930", Name = "Admin", NormalizedName = "ADMIN" }
                    );
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Account.MedicowebUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Pesel");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Drug.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Company");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Drug.Pharmacy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Drug.PharmacyDrug", b =>
                {
                    b.Property<Guid>("PharmacyId");

                    b.Property<Guid>("DrugId");

                    b.Property<Guid>("Id");

                    b.HasKey("PharmacyId", "DrugId");

                    b.HasIndex("DrugId");

                    b.ToTable("PharmacyDrugs");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Drug.PrescriptionDrug", b =>
                {
                    b.Property<Guid>("PrescriptionId");

                    b.Property<Guid>("DrugId");

                    b.Property<int>("DrugQuantity");

                    b.Property<Guid>("Id");

                    b.HasKey("PrescriptionId", "DrugId");

                    b.HasIndex("DrugId");

                    b.ToTable("PrescriptionDrugs");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Hospital.Departament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("HospitalId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Departaments");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Hospital.DepartamentDoctor", b =>
                {
                    b.Property<Guid>("DepartamentId");

                    b.Property<Guid>("DoctorId");

                    b.Property<Guid>("Id");

                    b.HasKey("DepartamentId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DepartamentDoctors");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Hospital.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Pesel");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Hospital.Hospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Hospital.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Specialization");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Hospital.SpecializationDoctor", b =>
                {
                    b.Property<Guid>("SpecializationId");

                    b.Property<Guid>("DoctorId");

                    b.Property<Guid>("Id");

                    b.HasKey("SpecializationId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("SpecializationDoctors");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Visit.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("MedicowebUserId");

                    b.Property<Guid>("VisitId");

                    b.HasKey("Id");

                    b.HasIndex("MedicowebUserId");

                    b.HasIndex("VisitId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Visit.Visit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DoctorId");

                    b.Property<DateTime>("End");

                    b.Property<Guid>("HospitalId");

                    b.Property<Guid>("PatientId");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Drug.PharmacyDrug", b =>
                {
                    b.HasOne("Medicoweb.Data.Models.Drug.Drug", "Drug")
                        .WithMany("PharmacyDrugs")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medicoweb.Data.Models.Drug.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyDrugs")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Drug.PrescriptionDrug", b =>
                {
                    b.HasOne("Medicoweb.Data.Models.Drug.Drug", "Drug")
                        .WithMany("PrescriptionDrug")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medicoweb.Data.Models.Visit.Prescription", "Prescription")
                        .WithMany("PrescriptionDrug")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Hospital.Departament", b =>
                {
                    b.HasOne("Medicoweb.Data.Models.Hospital.Hospital", "Hospital")
                        .WithMany("Departaments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Hospital.DepartamentDoctor", b =>
                {
                    b.HasOne("Medicoweb.Data.Models.Hospital.Departament", "Departament")
                        .WithMany("DepartamentDoctors")
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medicoweb.Data.Models.Hospital.Doctor", "Doctor")
                        .WithMany("DepartamentDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Hospital.SpecializationDoctor", b =>
                {
                    b.HasOne("Medicoweb.Data.Models.Hospital.Doctor", "Doctor")
                        .WithMany("SpecializationDoctor")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medicoweb.Data.Models.Hospital.Specialization", "Specialization")
                        .WithMany("SpecializationDoctor")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Visit.Prescription", b =>
                {
                    b.HasOne("Medicoweb.Data.Models.Account.MedicowebUser")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicowebUserId");

                    b.HasOne("Medicoweb.Data.Models.Visit.Visit", "Visit")
                        .WithMany("Prescription")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Medicoweb.Data.Models.Visit.Visit", b =>
                {
                    b.HasOne("Medicoweb.Data.Models.Hospital.Doctor", "Doctor")
                        .WithMany("Visits")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medicoweb.Data.Models.Hospital.Hospital", "Hospital")
                        .WithMany("Visits")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medicoweb.Data.Models.Account.MedicowebUser", "Patient")
                        .WithMany("Visits")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Medicoweb.Data.Models.Account.MedicowebRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Medicoweb.Data.Models.Account.MedicowebUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Medicoweb.Data.Models.Account.MedicowebUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Medicoweb.Data.Models.Account.MedicowebRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Medicoweb.Data.Models.Account.MedicowebUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Medicoweb.Data.Models.Account.MedicowebUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
